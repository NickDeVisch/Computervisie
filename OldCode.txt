
UIT MAIN
            # FindPainting (Ruben)
            extraxtList = findPainting.FindPainting(frame)
            if len(extraxtList): print('Matching, Paintings found:', len(extraxtList))
            goodMatches = pd.DataFrame()
            for extraxt in extraxtList:
                matchResult = matching.MatchPainting(extraxt)
                flannAmount_1 = matchResult[:1]['flannAmount'].values[0]
                flannAmount_2 = matchResult[1:2]['flannAmount'].values[0]
                print(flannAmount_1, flannAmount_2)
                if (flannAmount_1 > 2.5 * flannAmount_2 and flannAmount_1 > 150) or flannAmount_1 > 200:
                    goodMatch = True
                    goodMatches = pd.concat([goodMatches, matchResult[:1]])
            
            if goodMatch:
                matchResult = goodMatches[goodMatches['flannAmount'] == goodMatches['flannAmount'].max()]
                matching.AppendRoom(matchResult['naam'].values[0].split('__')[0])

                matchPainting = ResizeImage(cv2.imread(url + '\\Database\\' + matchResult['naam'].values[0]))
                floorplan = floorPlan.DrawPath(matching.roomSequence)

                cv2.imshow('Best match', matchPainting)
                cv2.imshow('Extract', extraxt)
                cv2.imshow('Floorplan', floorplan)



    # Flann
    start = time.time()
    if self.debug: print('flann')
    resultFlann = []
    for index, row in df_result.iterrows():
      resultFlann.append(self.__FlannMatching(self.descriptors[df_result['naam'][index]], descr))
    df_result['flannAmount'] = resultFlann
    maxFlann = max(resultFlann)
    df_result['flann'] = [float(i/maxFlann) for i in resultFlann]
    del resultFlann
    print(time.time() - start)




def __FlannMatching(self, descr1, descr2):
    matches = self.flann.knnMatch(descr1, descr2, k=2)
    matchesMask = [[0,0] for i in range(len(matches))]

    # ratio test.
    good = 0
    for i,(m,n) in enumerate(matches):
      if( m.distance < 0.7*n.distance):
        matchesMask[i]=[1,0]
        good += 1

    return good


  cv2.imshow('Filter', img_copy)
  cv2.waitKey(0)